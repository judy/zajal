#!/usr/bin/env ruby
require 'optparse'
require 'ostruct'
require 'tempfile'
require "base64"

def temp_name name
  Tempfile::Dir::Tmpname.make_tmpname Tempfile::Dir::Tmpname.tmpdir, name
end

def timestamped_name ext
  "zajal-frame-#{Time.now.strftime("%Y%m%d%H%M%S")}.#{ext}"
end

require_relative "../lib/zajal"

options = OpenStruct.new
OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} sketch.zj -o screenshot.png"

  options.width = 400
  options.height = 400
  options.b64 = false
  options.output = nil
  options.extension = "png"
  options.use_timestamp = false

  opts.on("-o", "--output file.png", "Path to write resulting image to") do |o|
    options.output = File.expand_path(o)
  end

  opts.on("-w", "--width W", "Width of the rendering, defaults to 400") do |w|
    options.width = w
  end

  opts.on("-h", "--height H", "Height of the rendering, defaults to 400") do |h|
    options.height = h
  end

  opts.on("-b", "--base64", "Write base64 encoded image to STDOUT") do |b|
    options.b64 = true
  end

  opts.on("-p", "--png", "Use .png extension when generating filenames, the default") do |b|
    options.extension = "png"
  end

  opts.on("-g", "--gif", "Use .gif extension when generating filenames") do |b|
    options.extension = "gif"
  end

  opts.on("-t", "--tiff", "Use .tiff extension when generating filenames") do |b|
    options.extension = "tiff"
  end

  opts.on("-j", "--jpg", "Use .jpg extension when generating filenames") do |b|
    options.extension = "jpg"
  end

  opts.on("-J", "--jpeg", "Use .jpeg extension when generating filenames") do |b|
    options.extension = "jpeg"
  end

  opts.on("-S", "--timestamp", "Use timestamped filename") do |b|
    options.use_timestamp = true
  end

  opts.on( "-?", "--help", "Display this message" ) do |v|
    puts opts.help
    exit
  end
end.parse!

options.output = timestamped_name options.extension if options.use_timestamp

sketch_file = ARGV.first

# output defaults to {input}-screenshot.png
if options.output.nil?
  options.output = if sketch_file.nil?
    timestamped_name options.extension
  else
    File.basename(sketch_file).gsub /\.[^\.]+/, ".#{options.extension}"
  end
end

# render sketch
zj = Zajal::Frontends::Headless.new options.width, options.height
zj.sketch = Zajal::Frontends::Headless::Sketch.new sketch_file.nil? ? STDIN.read : open(sketch_file)
zj.run

if options.b64
  # dump b64 to stdout
  path = temp_name "screenshot.png"
  zj.fbo.to_pixels.save path
  puts Base64.encode64(open(path).read)
  
  File.unlink path
else
  # save image to disk
  zj.fbo.to_pixels.save options.output
end
